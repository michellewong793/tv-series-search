{"version":3,"sources":["components/SeriesImage/index.js","components/SingleSeries/index.js","components/SeriesList/index.js","components/Form/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["SeriesImage","props","react_default","a","createElement","src","imageLink","SingleSeries","state","show","_this2","this","id","match","params","fetch","concat","then","response","json","setState","className","name","components_SeriesImage","image","medium","summary","replace","premiered","officialSite","href","Component","SeriesListItem","_ref","series","react_router_dom","to","SeriesList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","list","map","SeriesList_SeriesListItem","key","React","Form","isFetching","seriesName","onSeriesInputChange","e","_this","target","value","console","log","type","placeholder","onChange","components_SeriesList","Main","react_router","exact","path","component","App","process","components_Main","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","basename","src_App_0","document","getElementById","URL","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kWAYeA,SATK,SAACC,GACjB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,eCqCbC,oNAvCXC,MAAQ,CACJC,KAAM,yFAGU,IAAAC,EAAAC,KACRC,EAAOD,KAAKV,MAAMY,MAAMC,OAAxBF,GACRG,MAAK,+BAAAC,OAAgCJ,IACpCK,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIT,EAAKU,SAAS,CAAEX,KAAMU,uCAGhC,IACIV,EAASE,KAAKH,MAAdC,KACR,OACAP,EAAAC,EAAAC,cAAA,WACe,OAATK,GACFP,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,kBACXnB,EAAAC,EAAAC,cAAA,yBAAiBK,EAAKa,KAAtB,KACApB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,0BACXnB,EAAAC,EAAAC,cAACmB,EAAD,CAAajB,UAAWG,EAAKe,MAAQf,EAAKe,MAAMC,OAAQ,KACxDvB,EAAAC,EAAAC,cAAA,sBAAcK,EAAKiB,QAAQC,QAAQ,8BAA8B,IAAjE,MAEJzB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,gBACfnB,EAAAC,EAAAC,cAAA,wBAAgBK,EAAKmB,UAArB,KACEnB,EAAKoB,cACP3B,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAG0B,KAAMrB,EAAKoB,cAAepB,EAAKoB,yBA3B3BE,8BCErBC,SAAiB,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAF,OACnBhC,EAAAC,EAAAC,cAAA,MAAIiB,UAAU,oBACTnB,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAE,WAAApB,OAAakB,EAAOzB,KAAKG,KAAjC,IAAyCsB,EAAOzB,KAAKa,KAArD,QA2BMe,cAtBX,SAAAA,EAAYpC,GAAO,OAAAqC,OAAAC,EAAA,EAAAD,CAAA3B,KAAA0B,GAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA/B,KACTV,0EAGF,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIiB,UAAU,eACTV,KAAKV,MAAM0C,KAAKC,IAAI,SAAAV,GAAM,OACvBhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyC,EAAD,CAAgBX,OAAQA,EAAQY,IAAKZ,EAAOzB,KAAKG,KACjDV,EAAAC,EAAAC,cAACmB,EAAD,CAAaW,OAAQA,EAAQ5B,UAAW4B,EAAOzB,KAAKe,MAAQU,EAAOzB,KAAKe,MAAMC,OAAQ,iBAXzFsB,IAAMhB,WCwBhBiB,oNA7BbxC,MAAQ,CACN0B,OAAQ,GACRe,YAAY,EACZC,WAAY,MAGdC,oBAAsB,SAACC,GACrBC,EAAKjC,SAAU,CAAE8B,WAAYE,EAAEE,OAAOC,MAAON,YAAY,IACzDlC,MAAK,wCAAAC,OAAyCoC,EAAEE,OAAOC,QACpDtC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIkC,EAAKjC,SAAS,CAAEc,OAAQf,EAAM8B,YAAY,MACvDhC,KAAKuC,QAAQC,IAAIJ,EAAK7C,MAAM0B,kFAK/B,OACEhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+CAEEF,EAAAC,EAAAC,cAAA,SAAOsD,KAAK,OAAOC,YAAY,qBAAqBC,SAAUjD,KAAKwC,uBAErEjD,EAAAC,EAAAC,cAACyD,EAAD,CAAYlB,KAAMhC,KAAKH,MAAM0B,iBAvBlBH,cCOJ+B,EAPF,SAAA7D,GAAK,OACVC,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,KACI7D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC9C,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAW3D,MCgBlC4D,mLAjBX,OACEjE,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,UAAQiB,UAAU,cAChBnB,EAAAC,EAAAC,cAAA,iDAGCF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAMC,GAAKgC,sBAAX,QACAlE,EAAAC,EAAAC,cAACiE,EAAD,eATOtB,IAAMhB,WCOlBuC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7D,MACvB,2DAsCN,SAAS8D,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT3D,KAAK,SAAAgE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3E,QACfsE,UAAUC,cAAcO,YAI1B9B,QAAQC,IACN,gHAKEoB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBzB,QAAQC,IAAI,sCAGRoB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAM,SAAAC,GACLlC,QAAQkC,MAAM,4CAA6CA,KCzFjEC,IAASC,OACT1F,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAe0D,SAAUzB,qBAAwBlE,EAAAC,EAAAC,cAAC0F,EAAD,OAAyBC,SAASC,eAAe,SDc3F,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAI7B,oBAAwBI,OAAOC,SAAS3C,MACpDoE,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA5D,OAAMoD,oBAAN,sBAEPE,GAgEV,SAAiCM,EAAOC,GAEtC9D,MAAM6D,GACH3D,KAAK,SAAAC,GAEJ,IAAMkF,EAAclF,EAASmF,QAAQC,IAAI,gBAEnB,MAApBpF,EAASqF,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMxF,KAAK,SAAAgE,GACjCA,EAAayB,aAAazF,KAAK,WAC7BuD,OAAOC,SAASkC,aAKpBhC,EAAgBC,EAAOC,KAG1BY,MAAM,WACLjC,QAAQC,IACN,mEArFAmD,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMxF,KAAK,WACjCuC,QAAQC,IACN,+GAMJkB,EAAgBC,EAAOC,MCrC/BE","file":"static/js/main.9aaeecc4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./styles.css\";\n\nconst SeriesImage = (props) => {\n    return (\n        <div>\n            <img src={props.imageLink}></img> \n        </div> \n        \n    )\n}\n\nexport default SeriesImage;","import React, {Component} from 'react';\nimport SeriesImage from '../SeriesImage';\nimport \"./styles.scss\";\nclass SingleSeries extends Component {\n    state = {\n        show: null\n    }\n\n    componentDidMount() { \n        const { id } = this.props.match.params; \n        fetch(`http://api.tvmaze.com/shows/${id}`)\n        .then(response => response.json())\n        .then(json => this.setState({ show: json }))\n    }\n\n    render(){\n        const { show } = this.state;\n        return (\n        <div>\n            { show !== null && \n            <div className=\"show-container\">\n                <h2> Show Name: {show.name} </h2>\n                <div className=\"show-image-description\"> \n                    <SeriesImage imageLink={show.image ? show.image.medium :\"\"}/>\n                    <p> Summary: {show.summary.replace(/<p>|<b>|<\\/b>|<\\/p>|<\\/br>/g,\"\")} </p>\n                </div> \n                <div className=\"show-details\">\n                <p> Premiered: {show.premiered} </p>\n                { show.officialSite && \n                <h4>\n                    <a href={show.officialSite}>{show.officialSite}</a>\n                </h4> }\n                </div>\n               \n            </div>\n            }\n\n\n        </div>\n        )\n    }\n}\n\nexport default SingleSeries; \n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport './styles.css';\nimport SeriesImage from '../SeriesImage';\n\nconst SeriesListItem = ({series}) => (\n    <li className=\"series-list-item\">\n         <Link to={`/series/${series.show.id}`}> {series.show.name} </Link>\n    </li>\n)\n\nclass SeriesList extends React.Component {\n    constructor(props){\n        super(props);\n    }\n    render() {\n            return (\n                <div> \n                    <ul className=\"series-list\">\n                        {this.props.list.map(series => (\n                            <div>\n                            <SeriesListItem series={series} key={series.show.id} />\n                            <SeriesImage series={series} imageLink={series.show.image ? series.show.image.medium :\"\"}/>\n                            </div>\n                        ))}\n        \n                    </ul>\n                </div>\n            ) \n        }  \n    }\n   \n\n\nexport default SeriesList;\n","import React, {Component} from 'react';\nimport 'whatwg-fetch';\nimport SeriesList from '../SeriesList';\nimport './styles.css';\n\nclass Form extends Component { \n  state = {\n    series: [],\n    isFetching: false,\n    seriesName: '',\n  }\n  \n  onSeriesInputChange = (e) => {\n    this.setState( { seriesName: e.target.value, isFetching: true} );\n    fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\n      .then(response => response.json())\n      .then(json => this.setState({ series: json, isFetching: false}))\n      .then(console.log(this.state.series))\n     \n  }\n\n  render() {\n    return (\n      <div>\n        <label>\n          Which show are you looking for?\n          <input type=\"text\" placeholder=\"Search TV Guide...\" onChange={this.onSeriesInputChange}></input>\n        </label>\n        <SeriesList list={this.state.series}></SeriesList>\n      </div>\n    )\n  }\n}\n  \n\nexport default Form; \n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport SingleSeries from '../SingleSeries';\nimport Form from '../Form';\n\nconst Main = props => (\n        <Switch>\n            <Route exact path='/' component={Form}/>\n            <Route path='/series/:id' component={SingleSeries}/>\n        </Switch> \n)\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport {Link} from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Search for your favorite TV series! \n          </h1>\n           <Link to= {process.env.PUBLIC_URL + \"/\"}>Home</Link>\n           <Main/>\n\n        </header>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}