{"version":3,"sources":["components/SeriesImage/index.js","components/SeriesList/index.js","components/Form/index.js","components/SingleSeries/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["SeriesImage","props","react_default","a","createElement","src","imageLink","SeriesListItem","_ref","series","className","react_router_dom","to","concat","show","id","name","SeriesList","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","list","map","SeriesList_SeriesListItem","key","components_SeriesImage","image","medium","React","Component","Form","state","isFetching","seriesName","onSeriesInputChange","e","_this","setState","target","value","fetch","then","response","json","console","log","type","placeholder","onChange","components_SeriesList","SingleSeries","_this2","match","params","summary","replace","premiered","officialSite","href","Main","react_router","path","process","component","App","components_Main","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kWAYeA,eATK,SAACC,GACjB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,eCDtBC,EAAiB,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,OAAF,OACnBP,EAAAC,EAAAC,cAAA,MAAIM,UAAU,oBACTR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAE,WAAAC,OAAaJ,EAAOK,KAAKC,KAAjC,IAAyCN,EAAOK,KAAKE,KAArD,OA2BMC,cAtBX,SAAAA,EAAYhB,GAAO,OAAAiB,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,KAAAH,KACTnB,0EAGF,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,eACTU,KAAKnB,MAAMuB,KAAKC,IAAI,SAAAhB,GAAM,OACvBP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsB,EAAD,CAAgBjB,OAAQA,EAAQkB,IAAKlB,EAAOK,KAAKC,KACjDb,EAAAC,EAAAC,cAACwB,EAAD,CAAanB,OAAQA,EAAQH,UAAWG,EAAOK,KAAKe,MAAQpB,EAAOK,KAAKe,MAAMC,OAAQ,iBAXzFC,IAAMC,WCwBhBC,oNA7BbC,MAAQ,CACNzB,OAAQ,GACR0B,YAAY,EACZC,WAAY,MAGdC,oBAAsB,SAACC,GACrBC,EAAKC,SAAU,CAAEJ,WAAYE,EAAEG,OAAOC,MAAOP,YAAY,IACzDQ,MAAK,wCAAA9B,OAAyCyB,EAAEG,OAAOC,QACpDE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIP,EAAKC,SAAS,CAAE/B,OAAQqC,EAAMX,YAAY,MACvDS,KAAKG,QAAQC,IAAIT,EAAKL,MAAMzB,kFAK/B,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+CAEEF,EAAAC,EAAAC,cAAA,SAAO6C,KAAK,OAAOC,YAAY,qBAAqBC,SAAU/B,KAAKiB,uBAErEnC,EAAAC,EAAAC,cAACgD,EAAD,CAAY5B,KAAMJ,KAAKc,MAAMzB,iBAvBlBuB,8BCsCJqB,oNAvCXnB,MAAQ,CACJpB,KAAM,yFAGU,IAAAwC,EAAAlC,KACRL,EAAOK,KAAKnB,MAAMsD,MAAMC,OAAxBzC,GACR4B,MAAK,+BAAA9B,OAAgCE,IACpC6B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIQ,EAAKd,SAAS,CAAE1B,KAAMgC,uCAGhC,IACIhC,EAASM,KAAKc,MAAdpB,KACR,OACAZ,EAAAC,EAAAC,cAAA,WACe,OAATU,GACFZ,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACXR,EAAAC,EAAAC,cAAA,yBAAiBU,EAAKE,KAAtB,KACAd,EAAAC,EAAAC,cAAA,OAAKM,UAAU,0BACXR,EAAAC,EAAAC,cAACwB,EAAD,CAAatB,UAAWQ,EAAKe,MAAQf,EAAKe,MAAMC,OAAQ,KACxD5B,EAAAC,EAAAC,cAAA,sBAAcU,EAAK2C,QAAQC,QAAQ,8BAA8B,IAAjE,MAEJxD,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACfR,EAAAC,EAAAC,cAAA,wBAAgBU,EAAK6C,UAArB,KACE7C,EAAK8C,cACP1D,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGyD,KAAM/C,EAAK8C,cAAe9C,EAAK8C,yBA3B3B5B,cCSZ8B,EAPF,SAAA7D,GAAK,OACdC,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,KACI7D,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOC,KAAMC,uBADjB,cACmEhC,EADnE,KAEI/B,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOC,KAAK,cAAcE,UAAWb,MCgB9Bc,mLAjBX,OACEjE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGyD,KAAMI,sBAAT,wCAIF/D,EAAAC,EAAAC,cAACgE,EAAD,eAVQrC,IAAMC,WCOlBqC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DAsCN,SAASmB,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT/B,KAAK,SAAAoC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhD,QACf2C,UAAUC,cAAcO,YAI1BtC,QAAQC,IACN,gHAKE4B,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBjC,QAAQC,IAAI,sCAGR4B,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAM,SAAAC,GACL1C,QAAQ0C,MAAM,4CAA6CA,KCzFjEC,IAASC,OACTzF,EAAAC,EAAAC,cAACO,EAAA,EAAD,KAAeT,EAAAC,EAAAC,cAACwF,EAAD,OAAyBC,SAASC,eAAe,SDczD,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAI9B,oBAAwBM,OAAOC,SAASX,MACpDmC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAA9D,OAAMoD,oBAAN,sBAEPI,GAgEV,SAAiCM,EAAOC,GAEtCjC,MAAMgC,GACH/B,KAAK,SAAAC,GAEJ,IAAMqD,EAAcrD,EAASsD,QAAQC,IAAI,gBAEnB,MAApBvD,EAASwD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAM3D,KAAK,SAAAoC,GACjCA,EAAawB,aAAa5D,KAAK,WAC7B2B,OAAOC,SAASiC,aAKpB/B,EAAgBC,EAAOC,KAG1BY,MAAM,WACLzC,QAAQC,IACN,mEArFA0D,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAM3D,KAAK,WACjCG,QAAQC,IACN,+GAMJ0B,EAAgBC,EAAOC,MCrC/BE","file":"static/js/main.4ff3e5fc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./styles.css\";\n\nconst SeriesImage = (props) => {\n    return (\n        <div>\n            <img src={props.imageLink}></img> \n        </div> \n        \n    )\n}\n\nexport default SeriesImage;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport './styles.css';\nimport SeriesImage from '../SeriesImage';\n\nconst SeriesListItem = ({series}) => (\n    <li className=\"series-list-item\">\n         <Link to={`/series/${series.show.id}`}> {series.show.name} </Link>\n    </li>\n)\n\nclass SeriesList extends React.Component {\n    constructor(props){\n        super(props);\n    }\n    render() {\n            return (\n                <div> \n                    <ul className=\"series-list\">\n                        {this.props.list.map(series => (\n                            <div>\n                            <SeriesListItem series={series} key={series.show.id} />\n                            <SeriesImage series={series} imageLink={series.show.image ? series.show.image.medium :\"\"}/>\n                            </div>\n                        ))}\n        \n                    </ul>\n                </div>\n            ) \n        }  \n    }\n   \n\n\nexport default SeriesList;\n","import React, {Component} from 'react';\nimport 'whatwg-fetch';\nimport SeriesList from '../SeriesList';\nimport './styles.css';\n\nclass Form extends Component { \n  state = {\n    series: [],\n    isFetching: false,\n    seriesName: '',\n  }\n  \n  onSeriesInputChange = (e) => {\n    this.setState( { seriesName: e.target.value, isFetching: true} );\n    fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\n      .then(response => response.json())\n      .then(json => this.setState({ series: json, isFetching: false}))\n      .then(console.log(this.state.series))\n     \n  }\n\n  render() {\n    return (\n      <div>\n        <label>\n          Which show are you looking for?\n          <input type=\"text\" placeholder=\"Search TV Guide...\" onChange={this.onSeriesInputChange}></input>\n        </label>\n        <SeriesList list={this.state.series}></SeriesList>\n      </div>\n    )\n  }\n}\n  \n\nexport default Form; \n","import React, {Component} from 'react';\nimport SeriesImage from '../SeriesImage';\nimport \"./styles.scss\";\nclass SingleSeries extends Component {\n    state = {\n        show: null\n    }\n\n    componentDidMount() { \n        const { id } = this.props.match.params; \n        fetch(`http://api.tvmaze.com/shows/${id}`)\n        .then(response => response.json())\n        .then(json => this.setState({ show: json }))\n    }\n\n    render(){\n        const { show } = this.state;\n        return (\n        <div>\n            { show !== null && \n            <div className=\"show-container\">\n                <h2> Show Name: {show.name} </h2>\n                <div className=\"show-image-description\"> \n                    <SeriesImage imageLink={show.image ? show.image.medium :\"\"}/>\n                    <p> Summary: {show.summary.replace(/<p>|<b>|<\\/b>|<\\/p>|<\\/br>/g,\"\")} </p>\n                </div> \n                <div className=\"show-details\">\n                <p> Premiered: {show.premiered} </p>\n                { show.officialSite && \n                <h4>\n                    <a href={show.officialSite}>{show.officialSite}</a>\n                </h4> }\n                </div>\n               \n            </div>\n            }\n\n\n        </div>\n        )\n    }\n}\n\nexport default SingleSeries; \n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport SingleSeries from '../SingleSeries';\nimport Form from '../Form';\n\nconst Main = props => (\n    <Switch>\n        <Route path={process.env.PUBLIC_URL + '/'}></Route> component={Form}/>\n        <Route path='/series/:id' component={SingleSeries}/>\n    </Switch>\n)\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Form from './components/Form'\nimport './App.css';\nimport Main from './components/Main';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            <a href={process.env.PUBLIC_URL + '/'}>\n            Search for your favorite TV series! \n            </a>\n          </h1>\n          <Main/>\n        </header>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}